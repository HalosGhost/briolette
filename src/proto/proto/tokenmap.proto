// Copyright 2023 The Briolette Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package briolette.tokenmap;

import "token.proto";

service TokenMap {
    // Creates or updates an existing entry if needed.
    rpc Update (UpdateRequest) returns (UpdateReply);
    // Store ticket<>NAC and NAC<>group mappings for Clerk
    rpc StoreTickets (StoreTicketsRequest) returns (StoreTicketsReply);
    // Returns all non-archived abused tokens
    rpc RevocationData (RevocationDataRequest) returns (RevocationDataReply);
    // Removes a token's revocation from being returned with Fetch.
    rpc Archive (ArchiveRequest) returns (ArchiveReply);
}

message StoreTicketsRequest {
  // Contains groups and the TTC credential
  repeated .briolette.token.SignedTicket tickets = 1;
  // The signature over all the ticket requests
  LinkableSignature nac = 2;
}
message StoreTicketsReply {
}

enum SelectGroup {
  ALL = 0;
}
message RevocationDataRequest {
  oneof select {
    SelectGroup group = 1;
    bytes id = 2;
  }
  // TODO Add limits and paging
}

message LinkableSignature {
  // TODO: wrap in crypto::v0 -> ecdaa_signature_FP256_get_pseudonym
  bytes signature = 1; // extract the pseudonym (sig->K) for bsn revocation
  bytes basename = 2;  // enables easy re-forced signing
  bytes group_public_key = 3;  // this can be stored more efficiently later.
}

message Group {
  uint32 number = 1;
  uint64 expiration = 2;
}

// Created during an Update when double spending is detected.
message RevocationData {
  // Time when the abuse was discovered.
  uint64 timestamp = 1;
  // The NAC linkable signature comes from the ticket request associated with the abusive credential.
  LinkableSignature nac = 2;
  // The TTC linkable signature comes from the double spend signature in the token.Transfer.
  LinkableSignature ttc = 3;
  // Signature of the Token.base
  bytes token_id = 4;  // All servers should keep a revoked token list even if wallets don't.
  // The tokens' hard expiration.
  uint64 token_expiry = 5;
  // For every impacted group, include the number and when the last ticket for the given
  // NAC issuer expires.
  repeated Group groups = 6;
  // Cause of the revocation
  AbuseType abuse = 7;
}

message RevocationDataEntry {
  bytes id = 1;  // token base signature
  RevocationData data = 2;
  uint64 created_on = 3;
}

message RevocationDataReply {
  // Returns all unarchived revocations.
  repeated RevocationDataEntry entries = 1;
}

// This is called to archive a revocation, by token base signature
message ArchiveRequest {
  bytes id = 1;
}
message ArchiveReply {
}


message UpdateRequest {
  bytes id = 1;
  .briolette.token.Token token = 2;
}

// If an abuse is detected, Tokenmap will create a RevocationData entry
// but just return that abuse was uncovered on the update.
message UpdateReply {
  bool created = 1;  // true on first seen
  bool abuse_detected = 2;
}

enum AbuseType {
  DOUBLE_SPEND = 0;  // token spent twice from the same node
  GENEROUS_SPLIT = 1;  // token splits add up to more than the original token value
  TOKEN_HISTORY_TOO_LONG = 2;  // hw fails to enforce maximum transfer limit
  TICKET_TRANSFER_AMOUNT_EXCEEDED = 3;  // All transfers by a single ticket exceed its policy amount
}


message Abuse {
  uint64 discovery_timestamp = 1;
  uint32 token_index = 2;  // against which stored token
  uint32 history_index = 3; // in the indicated token
  AbuseType abuse_type = 4;
}

message Entry {
  // Usually the signature of the base.
  bytes id = 1;
  // Each entry should represent histories which do not merge.
  //
  // If a token splits, then multiple histories are possible.
  // However, if there is no split, it indicates double spending.
  repeated .briolette.token.Token tokens = 2;
  repeated Abuse abuses = 3;
  uint64 last_update = 4;
}
