// Copyright 2023 The Briolette Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package briolette.token;

import "amount_type.proto";

message Ticket {
  bytes credential = 1;
  TicketData tags = 2;
}

message TicketData {
  uint32 group_number = 1;  // Initially, a number in the range [0, 64).
  uint32 lifetime = 2; // # of epochs (currently 86400 second periods) it is valid.
  uint64 created_on = 3;  // currrent epoch value and the required ticket request signature basename.
}

message SignedTicket {
  Ticket ticket = 1;
  // Signature over a serialized ticket with a recovery byte appended.
  bytes signature = 2;
}

message Amount {
  int32 whole = 1;
  // Must be [0.0, 1.0)
  float fractional = 2;
  // Specifies the currency type promised but does not
  // imply issuing authority for the currency.
  // That will depend on mint (group) keys.
  AmountType code = 3;
}

enum Version {
  V0 = 0;
}

message Descriptor {
  Version version = 1;
  Amount value = 2;
}

message Tag {
  oneof value {
    uint64 valid_until = 2; // epoch timestamp; only honored in first transfer.
    bytes trimmed_from = 3; // original transfer signature (only verifiable by authority)
    Amount split_value = 4; // new value which is less than the Descriptor value
  }
}

message Transfer {
  // Credential commitment with policy.
  SignedTicket recipient = 1;
  repeated Tag tags = 2;
  // This is only populated during signing or verification, not for transport.
  bytes previous_signature = 3;  // Or digest(descriptor) for the 0th.
}

message History {
  Transfer transfer = 1;
  // 0th signature must be signed by a mint credential and uses recoverable ecdsa NistP256.
  // All other signatures must be signed by a TTC credential.
  // For all non-base signatures, the first bytes are the serialized credential.
  //
  // Trimming "reissues" the History and adds the trimmed_from tag.  Trim servers use a
  // different keypair than the mint which enables easier discovery of trim key abuse.  The risk
  // is still high, so other approaches may be appealing -- token swapping or having every trim
  // server act as the "first" minted credential such that they can double spend but never
  // change the value or original token tags.
  bytes signature = 2;
}

message Token {
  Descriptor descriptor = 1;
  History base = 2;
  repeated History history = 3;
  // TODO: optional "hint" value for splits?
}

